#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <map>

#define BEGIN_X 11
#define BEGIN_Y 4
#define WIDTH 8
#define HEIGHT 10
#define SPACING 1

std::map< std::string, std::string >	recognizer;

/* utils */
void split(const std::string &s, char delim, std::vector<std::string> &elems)
{
    std::stringstream ss;
    ss.str(s);
    std::string item;

	elems.clear();
    while (std::getline(ss, item, delim))
	{
        elems.push_back(item);
    }
}
void split_white(const std::string &s, std::vector<std::string> &elems)
{
	std::string	buf;

	elems.clear();
    for (int i = 0; i < s.size(); i++)
	{
		if (s[i] == ' ' || s[i] == '\n')
		{
        	elems.push_back(buf);
			buf.clear();
			i++;
		}
		buf += s[i];
    }
}
/**/

/* image processing */
std::string		binarize(std::string image)
{
	std::vector<std::string>	tokens;
	std::vector<std::string>	temp;
	std::string	   				final;

	split_white(image, tokens);


	temp.clear();
	for(unsigned int i = 0; i < tokens.size(); i++)
	{
		split(tokens[i], ',', temp);
		if(stoi(temp[0]) + stoi(temp[1]) + stoi(temp[2]) < 100)
			final += "1";
		else
			final += "0";
	}
	return(final);
}
std::string focus_on_letter(int index, std::string image)
{
	std::string		result;
	int				y_start;
	int				y_end;

	y_start = BEGIN_Y + (WIDTH + SPACING) * index;
	y_end = BEGIN_Y + (WIDTH + SPACING) * index + WIDTH;

	for (unsigned int x = BEGIN_X; x < 30; x++) // ligne/raw
	{
		for (unsigned int y = BEGIN_Y; y < 60; y++) // colonne/column
		{
			if(x <= (BEGIN_X + HEIGHT) && y <= y_end && y > y_start)
			{
				result += image[x * 60 + y];
			}
		}
	}
	return (result);
}
/**/

void	print_image(std::string image, int width, int height)
{
	for (int x = 0; x < height; x++)
	{
		for (int y = 0; y < width; y++)
			std::cout << image[x * width + y];
		std::cout << std::endl;
	}
}

std::string		ocr(std::string image)
{
	std::string focused;
	std::string	result;

	image = binarize(image); // black and non blacks
	print_image(image, 60, 30);
	for(unsigned int i = 0; i < 5; i++)
	{
		focused = focus_on_letter(i, image);
		print_image(focused, 8, 10);
		if(recognizer.find(focused) != recognizer.end())
			result += recognizer[focused];
		else
			std::cerr << "[ERROR] Unknown charactere" << std::endl << focused << std::endl;;
	}
	return(result);
}

void	init_map( void );

/********************************MAIN********************************/
int		main( void )
{
	std::string image;
	std::string line;
	
	init_map();
	std::cin >> line; // trowing away
	std::cin >> line; // trowing away
	while(std::cin >> line)
	{
		if(image.size() != 0)
			line = " " + line;
		image += line;
	}
	std::cout << ocr(image) << std::endl;
	return 0;
}
/********************************************************************/

void	init_map( void )
{
// content of this function is generated by captcha.cpp 
recognizer["0001100000111100011001101100001111000011110000111111111111000011110000111100001100000000"] = "A";
recognizer["1111110011000110110000111100011011111100110001101100001111000011110001101111110000000000"] = "B";
recognizer["0011111001100011110000011100000011000000110000001100000011000001011000110011111000000000"] = "C";
recognizer["1111110011000110110000111100001111000011110000111100001111000011110001101111110000000000"] = "D";
recognizer["1111111011000000110000001100000011111100110000001100000011000000110000001111111000000000"] = "E";
recognizer["1111111111000000110000001100000011111100110000001100000011000000110000001100000000000000"] = "F";
recognizer["0011111001100011110000001100000011000000110001111100001111000011011000110011111000000000"] = "G";
recognizer["1100001111000011110000111100001111111111110000111100001111000011110000111100001100000000"] = "H";
recognizer["0111111000011000000110000001100000011000000110000001100000011000000110000111111000000000"] = "I";
recognizer["0001111000000110000001100000011000000110000001100000011001000110011011000011100000000000"] = "J";
recognizer["1100001111000100110011001101100011110000111100001101100011001100110001101100001100000000"] = "K";
recognizer["1100000011000000110000001100000011000000110000001100000011000000110000001111111000000000"] = "L";
recognizer["1100001111100111111111111101101111011011110110111100001111000011110000111100001100000000"] = "M";
recognizer["1100001111100011111100111111001111011011110110111100111111000111110001111100001100000000"] = "N";
recognizer["0011110001100110110000111100001111000011110000111100001111000011011001100011110000000000"] = "O";
recognizer["1111111011000011110000111100001111111110110000001100000011000000110000001100000000000000"] = "P";
recognizer["0011110001100110110000111100001111000011110000111101101111001111011001100011110100000000"] = "Q";
recognizer["1111111011000011110000111100001111111110111110001100110011000110110000111100001100000000"] = "R";
recognizer["0111111011000011110000001100000001111110000000110000001100000011110000110111111000000000"] = "S";
recognizer["1111111100011000000110000001100000011000000110000001100000011000000110000001100000000000"] = "T";
recognizer["1100001111000011110000111100001111000011110000111100001111000011011001100011110000000000"] = "U";
recognizer["1100001111000011110000110110011001100110011001100011110000111100000110000001100000000000"] = "V";
recognizer["1100001111000011110000111100001111011011110110111101101111111111111001111100001100000000"] = "W";
recognizer["1100001111000011011001100011110000011000000110000011110001100110110000111100001100000000"] = "X";
recognizer["1100001111000011011001100011110000011000000110000001100000011000000110000001100000000000"] = "Y";
recognizer["1111111000000110000001100000110000011000001100000110000011000000110000001111111000000000"] = "Z";
recognizer["0001100000111000011110000001100000011000000110000001100000011000000110000111111000000000"] = "1";
recognizer["0011110001100110110000110000001100000110000011000001100000110000011000001111111100000000"] = "2";
recognizer["0111110011000110000000110000011000011100000001100000001100000011110001100111110000000000"] = "3";
recognizer["0000011000001110000111100011011001100110110001101111111100000110000001100000011000000000"] = "4";
recognizer["1111111011000000110000001101110011100110000000110000001111000011011001100011110000000000"] = "5";
recognizer["0011110001100110110000101100000011011100111001101100001111000011011001100011110000000000"] = "6";
recognizer["1111111100000011000000110000011000001100000110000011000001100000110000001100000000000000"] = "7";
recognizer["0011110001100110110000110110011000111100011001101100001111000011011001100011110000000000"] = "8";
recognizer["0011110001100110110000111100001101100111001110110000001101000011011001100011110000000000"] = "9";
recognizer["0001100000111100011001101100001111000011110000111100001101100110001111000001100000000000"] = "0";
}
